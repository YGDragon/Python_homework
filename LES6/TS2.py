"""
2. Есть два списка: tutors - имена учеников, groups - названия их классов.
   Необходимо сформировать список кортежей вида (tutor, group).

    Техническое задание
    Программа должна работать со списками tutors, groups любой длины.
    Длина результирующего списка не должна быть больше длины списка tutors.
    Если в списке groups меньше элементов, чем в списке tutors, необходимо вывести последние кортежи в виде:
    (<tutor>, None), например: ('Станислав', None)
    Если в списке tutors меньше элементов, чем в списке groups, то смотри пункт 2.
    Вы можете использовать в этом задании функции zip и zip_longest, но лучше обойтись без них
    Не меняйте исходные списки tutors и groups и не создавайте промежуточных списков. Только список результат.
    Подтвердите работоспособность(выведите в консоль результаты) для обоих вариантов:
    groups меньше tutors и tutors меньше groups.
    Сделайте сначала задание через циклы обычным образом, затем оформите решение в "одну строку" в виде comprehensions

    Примеры/Тесты:
                    tutors = [
                        'Иван', 'Анастасия', 'Петр', 'Сергей',
                        'Дмитрий', 'Борис', 'Елена'
                    ]
                    groups = [
                        '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
                    ]

    Результат, где учеников меньше
            Ученики: ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
            Классы: ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
            Список:
            ('Иван', '9А')
            ('Анастасия', '7В')
            ('Петр', '9Б')
            ('Сергей', '9В')
            ('Дмитрий', '8Б')
            ('Борис', '10А')
            ('Елена', '10Б')

    Результат, где учеников больше
            Ученики: ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
            Классы: ['9А', '7В', '9Б', '9В']
            Список:
            ('Иван', '9А')
            ('Анастасия', '7В')
            ('Петр', '9Б')
            ('Сергей', '9В')
            ('Дмитрий', None)
            ('Борис', None)
            ('Елена', None)
            """


# решение задачи с использованием циклов
def gen1_list(t_lst, g_lst) -> list:
    pair = []
    idx = 0
    for name in t_lst:
        while idx < len(t_lst):
            if idx < len(g_lst):
                pair.append((name, g_lst[idx]))
                idx += 1
            else:
                pair.append((name, None))
            break
    return pair


# решение задачи "одну строку" в виде comprehensions
def gen2_list(t_lst, g_lst) -> list:
    pair = [(t_lst[i], g_lst[i]) if i < len(g_lst) else (t_lst[i], None) for i in range(len(t_lst))]
    return pair


# печать итогового списка
def print_list(list_tpl):
    print('\tСписок:')
    for tpl in list_tpl:
        print(f'\t{tpl}')


tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей',
    'Дмитрий', 'Борис', 'Елена'
]
groups1 = [
    '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
]
groups2 = [
    '9А', '7В', '9Б', '9В'
]
print('Результат, где учеников меньше')
print(f'\tУченики: {tutors}, \n\tКлассы: {groups1}')
print_list(gen1_list(tutors, groups1))


print('\nРезультат, где учеников больше')
print(f'\tУченики: {tutors}, \n\tКлассы: {groups2}')
print_list(gen1_list(tutors, groups2))
print()
